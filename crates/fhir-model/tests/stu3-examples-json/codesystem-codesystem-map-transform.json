{
  "resourceType": "CodeSystem",
  "id": "map-transform",
  "meta": {
    "lastUpdated": "2019-10-24T11:53:00+11:00"
  },
  "text": {
    "status": "generated",
    "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><h2>StructureMapTransform</h2><div><p>How data is copied/created</p>\n</div><p>This code system http://hl7.org/fhir/map-transform defines the following codes:</p><table class=\"codes\"><tr><td><b>Code</b></td><td><b>Display</b></td><td><b>Definition</b></td></tr><tr><td>create<a name=\"map-transform-create\"> </a></td><td>create</td><td>create(type : string) - type is passed through to the application on the standard API, and must be known by it</td></tr><tr><td>copy<a name=\"map-transform-copy\"> </a></td><td>copy</td><td>copy(source)</td></tr><tr><td>truncate<a name=\"map-transform-truncate\"> </a></td><td>truncate</td><td>truncate(source, length) - source must be stringy type</td></tr><tr><td>escape<a name=\"map-transform-escape\"> </a></td><td>escape</td><td>escape(source, fmt1, fmt2) - change source from one kind of escaping to another (plain, java, xml, json). note that this is for when the string itself is escaped</td></tr><tr><td>cast<a name=\"map-transform-cast\"> </a></td><td>cast</td><td>cast(source, type?) - case source from one type to another. target type can be left as implicit if there is one and only one target type known</td></tr><tr><td>append<a name=\"map-transform-append\"> </a></td><td>append</td><td>append(source...) - source is element or string</td></tr><tr><td>translate<a name=\"map-transform-translate\"> </a></td><td>translate</td><td>translate(source, uri_of_map) - use the translate operation</td></tr><tr><td>reference<a name=\"map-transform-reference\"> </a></td><td>reference</td><td>reference(source : object) - return a string that references the provided tree properly</td></tr><tr><td>dateOp<a name=\"map-transform-dateOp\"> </a></td><td>dateOp</td><td>Perform a date operation. *Parameters to be documented*</td></tr><tr><td>uuid<a name=\"map-transform-uuid\"> </a></td><td>uuid</td><td>Generate a random UUID (in lowercase). No Parameters</td></tr><tr><td>pointer<a name=\"map-transform-pointer\"> </a></td><td>pointer</td><td>Return the appropriate string to put in a reference that refers to the resource provided as a parameter</td></tr><tr><td>evaluate<a name=\"map-transform-evaluate\"> </a></td><td>evaluate</td><td>Execute the supplied fluentpath expression and use the value returned by that</td></tr><tr><td>cc<a name=\"map-transform-cc\"> </a></td><td>cc</td><td>Create a CodeableConcept. Parameters = (text) or (system. Code[, display])</td></tr><tr><td>c<a name=\"map-transform-c\"> </a></td><td>c</td><td>Create a Coding. Parameters = (system. Code[, display])</td></tr><tr><td>qty<a name=\"map-transform-qty\"> </a></td><td>qty</td><td>Create a quantity. Parameters = (text) or (value, unit, [system, code]) where text is the natural representation e.g. [comparator]value[space]unit</td></tr><tr><td>id<a name=\"map-transform-id\"> </a></td><td>id</td><td>Create an identifier. Parameters = (system, value[, type]) where type is a code from the identifier type value set</td></tr><tr><td>cp<a name=\"map-transform-cp\"> </a></td><td>cp</td><td>Create a contact details. Parameters = (value) or (system, value). If no system is provided, the system should be inferred from the content of the value</td></tr></table></div>"
  },
  "extension": [
    {
      "url": "http://hl7.org/fhir/StructureDefinition/structuredefinition-ballot-status",
      "valueString": "Informative"
    },
    {
      "url": "http://hl7.org/fhir/StructureDefinition/structuredefinition-fmm",
      "valueInteger": 2
    },
    {
      "url": "http://hl7.org/fhir/StructureDefinition/structuredefinition-wg",
      "valueCode": "fhir"
    }
  ],
  "url": "http://hl7.org/fhir/map-transform",
  "identifier": {
    "system": "urn:ietf:rfc:3986",
    "value": "urn:oid:2.16.840.1.113883.4.642.1.668"
  },
  "version": "3.0.2",
  "name": "StructureMapTransform",
  "status": "draft",
  "experimental": false,
  "date": "2019-10-24T11:53:00+11:00",
  "publisher": "HL7 (FHIR Project)",
  "contact": [
    {
      "telecom": [
        {
          "system": "url",
          "value": "http://hl7.org/fhir"
        },
        {
          "system": "email",
          "value": "fhir@lists.hl7.org"
        }
      ]
    }
  ],
  "description": "How data is copied/created",
  "caseSensitive": true,
  "valueSet": "http://hl7.org/fhir/ValueSet/map-transform",
  "content": "complete",
  "concept": [
    {
      "code": "create",
      "display": "create",
      "definition": "create(type : string) - type is passed through to the application on the standard API, and must be known by it"
    },
    {
      "code": "copy",
      "display": "copy",
      "definition": "copy(source)"
    },
    {
      "code": "truncate",
      "display": "truncate",
      "definition": "truncate(source, length) - source must be stringy type"
    },
    {
      "code": "escape",
      "display": "escape",
      "definition": "escape(source, fmt1, fmt2) - change source from one kind of escaping to another (plain, java, xml, json). note that this is for when the string itself is escaped"
    },
    {
      "code": "cast",
      "display": "cast",
      "definition": "cast(source, type?) - case source from one type to another. target type can be left as implicit if there is one and only one target type known"
    },
    {
      "code": "append",
      "display": "append",
      "definition": "append(source...) - source is element or string"
    },
    {
      "code": "translate",
      "display": "translate",
      "definition": "translate(source, uri_of_map) - use the translate operation"
    },
    {
      "code": "reference",
      "display": "reference",
      "definition": "reference(source : object) - return a string that references the provided tree properly"
    },
    {
      "code": "dateOp",
      "display": "dateOp",
      "definition": "Perform a date operation. *Parameters to be documented*"
    },
    {
      "code": "uuid",
      "display": "uuid",
      "definition": "Generate a random UUID (in lowercase). No Parameters"
    },
    {
      "code": "pointer",
      "display": "pointer",
      "definition": "Return the appropriate string to put in a reference that refers to the resource provided as a parameter"
    },
    {
      "code": "evaluate",
      "display": "evaluate",
      "definition": "Execute the supplied fluentpath expression and use the value returned by that"
    },
    {
      "code": "cc",
      "display": "cc",
      "definition": "Create a CodeableConcept. Parameters = (text) or (system. Code[, display])"
    },
    {
      "code": "c",
      "display": "c",
      "definition": "Create a Coding. Parameters = (system. Code[, display])"
    },
    {
      "code": "qty",
      "display": "qty",
      "definition": "Create a quantity. Parameters = (text) or (value, unit, [system, code]) where text is the natural representation e.g. [comparator]value[space]unit"
    },
    {
      "code": "id",
      "display": "id",
      "definition": "Create an identifier. Parameters = (system, value[, type]) where type is a code from the identifier type value set"
    },
    {
      "code": "cp",
      "display": "cp",
      "definition": "Create a contact details. Parameters = (value) or (system, value). If no system is provided, the system should be inferred from the content of the value"
    }
  ]
}